@inject IClinetChartService clientChartService;
 
<LineChart @ref="FHR2Chart"
           TItem="LiveDataPoint"
           OptionsObject="@FHR2ChartOptions">
    <ChartStreaming TItem="LiveDataPoint"
                    Options="new ChartStreamingOptions {
                                 Delay = 0,
                                 Refresh=1000
                             }"
                    Refreshed="@FHR2Refreshed" />
</LineChart>

@code{
    ConvertModel model = new ConvertModel();
    int skip = 0;
    LineChart<LiveDataPoint> FHR2Chart;

    public struct LiveDataPoint
    {
        public object X { get; set; }

        public object Y { get; set; }
    }

    object FHR2ChartOptions = new
    {
        Title = new
        {
            Display = true,
            Text = "FHR2 Heart Rate"
        },

        Scales = new
        {
            YAxes = new object[]
            {
                new {
                    ScaleLabel = new {
                    Display = true, LabelString = "value"},
                }
                        },

        },
        Tooltips = new
        {
            Mode = "nearest",
            Intersect = false
        },
        Hover = new
        {
            Mode = "nearest",
            Intersect = false
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.WhenAll(
                HandleRedraw(FHR2Chart, GetLineChartDataset1));
        }
    }

    async Task HandleRedraw<TDataSet, TItem, TOptions, TModel>(BaseChart<TDataSet, TItem, TOptions, TModel> chart, params Func<TDataSet>[] getDataSets)
        where TDataSet : ChartDataset<TItem>
        where TOptions : ChartOptions
        where TModel : ChartModel
    {
        await chart.Clear();

        await chart.AddLabelsDatasetsAndUpdate(Labels, getDataSets.Select(x => x.Invoke()).ToArray());
    }

    LineChartDataset<LiveDataPoint> GetLineChartDataset1()
    {
        return new LineChartDataset<LiveDataPoint>
        {
            Data = new List<LiveDataPoint>(),
            Label = "FHR2",
            BackgroundColor = backgroundColors[0],
            BorderColor = borderColors[0],
            Fill = false,
            LineTension = 0,
            BorderDash = new List<int> { 8, 4 },
        };
    }


    async Task FHR2Refreshed(ChartStreamingData<LiveDataPoint> data)
    {

        model = await clientChartService.GetData(skip);


        data.Value = new LiveDataPoint
        {
            X = DateTime.Now,
            Y = model.FHR2
        };
        skip++;

    }


    string[] Labels = { };
    List<string> backgroundColors =
        new List<string> {
            ChartColor.FromRgba(255, 99, 132, 0.2f),
            ChartColor.FromRgba(54, 162, 235, 0.2f),
            ChartColor.FromRgba(255, 206, 86, 0.2f),
            ChartColor.FromRgba(75, 192, 192, 0.2f),
            ChartColor.FromRgba(153, 102, 255, 0.2f),
            ChartColor.FromRgba(255, 159, 64, 0.2f) };
    List<string> borderColors = new List<string> {
        ChartColor.FromRgba(255, 99, 132, 1f),
        ChartColor.FromRgba(54, 162, 235, 1f),
        ChartColor.FromRgba(255, 206, 86, 1f),
        ChartColor.FromRgba(75, 192, 192, 1f),
        ChartColor.FromRgba(153, 102, 255, 1f),
        ChartColor.FromRgba(255, 159, 64, 1f) };

}